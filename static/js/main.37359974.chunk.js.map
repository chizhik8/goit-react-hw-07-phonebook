{"version":3,"sources":["redux/actions/contactsAction.js","redux/operations/contactsOperation.js","components/ContactForm/ContactForm.js","redux/selectors/contactsSelectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/reducers/contactsReducer.js","redux/reducers/rootReducer.js","redux/store.js","index.js"],"names":["addContactsRequest","createAction","addContactsSuccess","addContactsError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","removeContactsRequest","removeContactsSuccess","removeContactsError","addFilter","filter","payload","axios","defaults","baseURL","addContacts","name","number","dispatch","contactsAction","post","then","response","data","catch","error","fetchContacts","get","removeContact","id","delete","ContactForm","state","handleInput","e","target","value","setState","handleSubmit","preventDefault","props","onAddContacts","onSubmit","this","type","onChange","Component","mapDispatchToProps","contactsOperation","connect","getContactItems","contacts","items","getValueFilter","getLoading","loading","getAlert","alert","getContactList","createSelector","contact","toLowerCase","includes","onRemoveContact","contactsSelectors","TransitionGroup","component","map","CSSTransition","timeout","classNames","onClick","Filter","onInputFilter","App","onFetchContacts","length","isLoadingContacts","isAlertContacts","itemsReducer","createReducer","action","find","filterReducer","loadingReducer","alertReducer","combineReducers","rootReducer","contactsReducer","defaultMiddleware","getDefaultMiddleware","store","configureStore","reducer","middleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37359974.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n// import { v4 as uuidv4 } from \"uuid\";\n\n// ---------------Add contacts--------------------------\nconst addContactsRequest = createAction(\"contacts/addRequest\");\nconst addContactsSuccess = createAction(\"contacts/addSuccess\");\nconst addContactsError = createAction(\"contacts/addError\");\n\nconst fetchContactsRequest = createAction(\"contacts/fetchRequest\");\nconst fetchContactsSuccess = createAction(\"contacts/fetchSuccess\");\nconst fetchContactsError = createAction(\"contacts/fetchError\");\n\n// const addContacts = createAction(\"contacts/add\", (name, number) => ({\n//   payload: { contact: { id: uuidv4(), name, number } },\n// }));\n\n// ---------------Remove contacts--------------------------\n\nconst removeContactsRequest = createAction(\"contacts/removeRequest\");\nconst removeContactsSuccess = createAction(\"contacts/removeSuccess\");\nconst removeContactsError = createAction(\"contacts/removeError\");\n\n// const removeContact = createAction(\"contacts/remove\", (contactId) => ({\n//   payload: { contactId },\n// }));\n\n// ---------------Filter--------------------------\nconst addFilter = createAction(\"contacts/addFilter\", (filter) => ({\n  payload: { filter },\n}));\n\n// --------------------export---------------------------------\n\nexport default {\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  removeContactsSuccess,\n  removeContactsRequest,\n  removeContactsError,\n  // addContacts,\n  // removeContact,\n  addFilter,\n};\n","import axios from \"axios\";\r\nimport contactsAction from \"../actions/contactsAction\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:2000\";\r\n\r\nconst addContacts = (name, number) => (dispatch) => {\r\n  dispatch(contactsAction.addContactsRequest());\r\n\r\n  axios\r\n    .post(\"/contacts\", { name, number })\r\n    .then((response) => {\r\n      dispatch(contactsAction.addContactsSuccess(response.data));\r\n    })\r\n    .catch((error) => dispatch(contactsAction.addContactsError(error)));\r\n};\r\n\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(contactsAction.fetchContactsRequest());\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(contactsAction.fetchContactsSuccess(data)))\r\n    .catch((error) => dispatch(contactsAction.fetchContactsError(error)));\r\n};\r\n\r\nconst removeContact = (id) => (dispatch) => {\r\n  dispatch(contactsAction.removeContactsRequest());\r\n  //   console.log(\"id revCont\", id);\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactsAction.removeContactsSuccess(id)))\r\n    .catch((error) => dispatch(contactsAction.removeContactsError(error)));\r\n};\r\n\r\nexport default {\r\n  addContacts,\r\n  fetchContacts,\r\n  removeContact,\r\n};\r\n","import React, { Component } from \"react\";\n// import { CSSTransition } from 'react-transition-group';\nimport { connect } from \"react-redux\";\nimport contactsOperation from \"../../redux/operations/contactsOperation\";\nimport PropTypes from \"prop-types\";\nimport \"./contactform.css\";\n\nclass ContactForm extends Component {\n  static propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.number,\n  };\n\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleInput = (e) => {\n    const { name, value } = e.target;\n    this.setState(() => {\n      return {\n        [name]: value,\n      };\n    });\n  };\n\n  handleSubmit = (e) => {\n    const { name, number } = this.state;\n    e.preventDefault();\n    this.props.onAddContacts(name, number);\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <>\n        {/* <CSSTransition in={true} appear timeout={500} classNames=\"Logo\"> */}\n        <h1>Phonebook</h1>\n        {/* </CSSTransition> */}\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Name\n            <input\n              type=\"text\"\n              value={this.state.name}\n              onChange={this.handleInput}\n              name=\"name\"\n            />\n          </label>\n          <label>\n            Number\n            <input\n              type=\"tel\"\n              value={this.state.number}\n              onChange={this.handleInput}\n              name=\"number\"\n            />\n          </label>\n          <button type=\"submit\">Add contact</button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onAddContacts: contactsOperation.addContacts,\n};\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getLoading = (state) => state.contacts.loading;\r\n\r\nconst getContactItems = (state) => state.contacts.items;\r\n\r\nconst getAlert = (state) => state.contacts.alert;\r\n\r\nconst getValueFilter = (state) => state.contacts.filter;\r\n\r\nconst getContactList = createSelector(\r\n  [getContactItems, getValueFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  }\r\n);\r\n\r\n// const getContactList = (state) =>\r\n//   state.contacts.items.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase())\r\n//   );\r\n\r\nexport default {\r\n  getLoading,\r\n  getContactItems,\r\n  getAlert,\r\n  getValueFilter,\r\n  getContactList,\r\n};\r\n","import React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\n\nimport contactsOperation from \"../../redux/operations/contactsOperation\";\nimport contactsSelectors from \"../../redux/selectors/contactsSelectors\";\n\nimport \"./ContactList.css\";\n\nfunction ContactList({ contacts, onRemoveContact }) {\n  return (\n    <div>\n      <TransitionGroup component=\"ul\">\n        {contacts.map((contact) => (\n          <CSSTransition key={contact.id} timeout={250} classNames=\"contacts\">\n            <li>\n              {\" \"}\n              {contact.name}: {contact.number}\n              <button type=\"button\" onClick={() => onRemoveContact(contact.id)}>\n                x\n              </button>\n            </li>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.getContactList(state),\n});\n\nconst mapDispatchToProps = {\n  onRemoveContact: contactsOperation.removeContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport contactsAction from \"../../redux/actions/contactsAction\";\nimport contactsSelectors from \"../../redux/selectors/contactsSelectors\";\n\nclass Filter extends Component {\n  static propTypes = {\n    filter: PropTypes.string,\n  };\n\n  handleInput = (e) => {\n    this.props.onInputFilter(e.target.value);\n  };\n  render() {\n    return (\n      <div>\n        <h3>Find contacts by name</h3>\n        <input type=\"text\" onChange={this.handleInput} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  value: contactsSelectors.getValueFilter(state),\n});\n\nconst mapDispatchToProps = {\n  onInputFilter: contactsAction.addFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\nimport contactsOperation from \"../src/redux/operations/contactsOperation\";\nimport contactsSelectors from \"./redux/selectors/contactsSelectors\";\n\nexport class App extends Component {\n  componentDidMount() {\n    this.props.onFetchContacts();\n  }\n\n  render() {\n    // console.log(\"App alert:\", this.props.isAlertContacts);\n    return (\n      <div>\n        <ContactForm />\n        {this.props.contacts.length > 0 ? (\n          <Filter />\n        ) : (\n          <h2>Contact list is empty! Please add contact!</h2>\n        )}\n        {this.props.isLoadingContacts && <h1>Loading contacts......</h1>}\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n  contacts: contactsSelectors.getContactItems(state),\n  isAlertContacts: contactsSelectors.getAlert(state),\n});\n\nconst mapDispatchToProps = {\n  onFetchContacts: contactsOperation.fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\n// import actionTypes from '../constants/contactsActionTypes';\nimport contactsAction from \"../actions/contactsAction\";\n\n// ----------------------Contacts---------------------------------------\n\nconst itemsReducer = createReducer([], {\n  [contactsAction.fetchContactsSuccess]: (state, action) => action.payload,\n  [contactsAction.addContactsSuccess]: (state, action) => {\n    return state.find(\n      (contact) =>\n        contact.name.toLowerCase() === action.payload.name.toLowerCase()\n    )\n      ? alert(`${action.payload.name} is already in contacts `)\n      : [...state, action.payload];\n  },\n\n  [contactsAction.removeContactsSuccess]: (state, action) =>\n    state.filter((contact) => contact.id !== action.payload),\n});\n\n// ----------------Filter--------------------------------------------\nconst filterReducer = createReducer(\"\", {\n  [contactsAction.addFilter]: (state, action) => action.payload.filter,\n});\n\n// ----------------Loader-------------------------------------------\n\nconst loadingReducer = createReducer(false, {\n  [contactsAction.fetchContactsRequest]: () => true,\n  [contactsAction.addContactsRequest]: () => true,\n  [contactsAction.removeContactsRequest]: () => true,\n  [contactsAction.addContactsSuccess]: () => false,\n  [contactsAction.fetchContactsSuccess]: () => false,\n  [contactsAction.removeContactsSuccess]: () => false,\n  [contactsAction.addContactsError]: () => false,\n  [contactsAction.fetchContactsError]: () => false,\n  [contactsAction.removeContactsError]: () => false,\n});\n\n// ---------------------alert------------------------------\n\nconst alertReducer = createReducer(false, {});\n\n// ---------------------------export---------------------------------\nexport default combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n  loading: loadingReducer,\n  alert: alertReducer,\n});\n","import { combineReducers } from \"redux\";\nimport contactsReducer from \"./contactsReducer\";\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nexport default rootReducer;\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./reducers/rootReducer\";\n// import logger from \"redux-logger\";\n\nconst defaultMiddleware = getDefaultMiddleware();\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: [...defaultMiddleware],\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}